# -*- coding: utf-8 -*-
"""최대 힙 구조.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19MhB7GUr6Neo1XK1SvAJ7w67t_pyTaay
"""

import sys

# 최대 힙을 저장할 리스트
max_heap = []

# 입력으로 주어질 숫자의 개수
n = int(sys.stdin.readline())

# 힙에 값을 삽입하는 함수 (최대 힙 구조 유지)
def push(heap, value):
    # 힙에 새로운 값을 추가
    heap.append(value)
    # 새로 추가된 값의 인덱스
    idx = len(heap) - 1

    # 부모 노드와 비교하며 최대 힙 조건을 만족할 때까지 위로 이동
    while idx > 0:
        # 부모 노드의 인덱스 계산
        parent = (idx - 1) // 2

        # 부모 노드가 현재 노드보다 크거나 같으면 더 이상 위로 갈 필요가 없음
        if heap[parent] >= heap[idx]:
            break

        # 부모 노드와 현재 노드를 교환 (최대 힙 유지)
        heap[idx], heap[parent] = heap[parent], heap[idx]

        # 인덱스를 부모 노드로 이동하여 계속 비교
        idx = parent

# 힙에서 최대값을 꺼내는 함수 (최대 힙 구조 유지)
def pop(heap):
    # 힙이 비었으면 0 반환
    if not heap:
        return 0

    # 루트(최댓값)와 마지막 값을 교환 후, 마지막 값을 꺼냄
    heap[0], heap[-1] = heap[-1], heap[0]
    max_value = heap.pop()  # 실제로 마지막 값을 제거

    # 힙이 비었을 경우 바로 반환
    if not heap:
        return max_value

    # 루트에서부터 힙을 재정렬
    idx = 0
    size = len(heap)

    # 자식 노드들과 비교하여 최대 힙 구조를 복원
    while True:
        # 왼쪽 자식 노드의 인덱스
        left = 2 * idx + 1
        # 오른쪽 자식 노드의 인덱스
        right = 2 * idx + 2
        # 현재 노드의 인덱스를 가장 큰 값으로 가정
        largest = idx

        # 왼쪽 자식이 존재하고, 그 값이 현재 노드보다 크면 largest 갱신
        if left < size and heap[left] > heap[largest]:
            largest = left
        # 오른쪽 자식이 존재하고, 그 값이 현재 largest 값보다 크면 largest 갱신
        if right < size and heap[right] > heap[largest]:
            largest = right

        # 더 이상 교환할 필요가 없으면 루프 종료
        if largest == idx:
            break

        # 현재 노드와 largest 자식 노드를 교환
        heap[idx], heap[largest] = heap[largest], heap[idx]

        # 인덱스를 largest로 이동하여 다시 비교
        idx = largest

    return max_value

# 입력된 n개의 숫자를 처리
for i in range(n):
    # 입력된 숫자를 읽음
    num = int(sys.stdin.readline())

    # 숫자가 0이면 최대값을 출력 (pop), 아니면 힙에 추가 (push)
    if num == 0:
        # 힙에서 최대값을 꺼내 출력, 비어있으면 0 출력
        print(pop(max_heap))
    else:
        # 힙에 숫자 추가
        push(max_heap, num)